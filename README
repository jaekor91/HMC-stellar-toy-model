Notes: 
- All figures should be saved in ./figures/

/---- Exploring the typical set geometry of one star
Image
- Notes: Truth (or model) images with varying magnitudes.
- Script used: one-star-images.py
- Products:
	- one-star-image.png

Potential
- Notes: Various exploratory plots.
- Script used: one-star-potential.py
- Products:
	- one-star-V_dx.png: Plots of potential as a function of dx = (deviation in x direction from true x). Each panel corresponds to different true flux and dy.
	- one-star-V_m.png: Plots ofpotential as a function of model mag m. Each panel corresponds to different true m and shows plots of how the potential varies as a function of dr = dx.
	- one-star-V_dx_m.png: Plots of potential as a function of dx and model m. Each panel corresponds to different true flux and dy.
	- one-star-V_dx_dy.png: Plots of potential as a function of dx and dy. Each panel corresponds to different combination of true and model fluxes.

Gradients
- Notes: Gradient of the potential. Based on the images given in one-star-potential cases.
- Script used: one-star-grads.py
- Products:
	- one-star-dVdx_dx.png
	- one-star-dVdf_m.png
	- one-star-dVdx_dx_m.png
	- one-star-dVdf_dx_m.png: vmax=1. This way, we can see gradients turn positive vs. negative.	
	- one-star-dVdx_dx_dy.png

/---- One star in a no star background
General strategy:
- 48 x 48 image
- Place a star of a particular magnitude at the center and let it move. Find an appropriately fine scale time step for f, x, y.
- Allow viscous friction for later exploration.
- Plot the trajectory in xy-space and xm-space. Repeat for 1000 times for each choice of magnitude.

One particle history with various initial magnitudes
- Notes: Apply simple gradient descent to a test particle in a background. It appears that mag_B-2 magnitude star is very reasonable to use and mag_B-1.5 as the limit.
- Script used: one-star-in-background-single-history.py
- Products:
	- one-star-in-background-mag**-model-mag**-single-history.png

One particle many trajctories (xy and rm) with various initial magnitudes
- Notes: Follow the trajectory of 1000 particles in xy and rm space.
- Script used: one-star-in-background-many-trajectory.py
- Products:
	- one-star-in-background-mag**-model-mag**-many-trajectory.png

Lesson learned:
- It appears that mag_B-2 magnitude star is very reasonable to use and mag_B-1.5 as the limit.


/---- One star *mode* inference problem
General strategy:
- 48 x 48 image
- Place a star of a particular magnitude at 0-10 pixels away from the center and let it move. Find an appropriately fine scale time step for f, x, y.
- Use friction or max ceiling for veloctiy. RMS prop?
- Plot the trajectory in xy-space and xm-space. Use a color scheme to indicate time?
- Repeat for 1000 times for each choice of magnitude.
- Analyze the final modal distributions. Is the modal inference unbiased (i.e., average of the modes the same as truth)? What is the typical RMSE? What is the variance of the modal?
- How can you say about SN as a function magnitude?
- Come up with a strategy to eliminate escaping particles with a spatial prior. 
- Animation of how the particle approaches the mode of the potential.

One particle history with various initial magnitudes
- Notes: Follow the trajectory of a single particle including dt_x and so on. The goal is tune the parameters so that the particle ends up at the bottom of the proper well. mB, mT, and mM correspond to background, truth and intial model magnitude. dx is how far the particle is placed away from the true location. 
- Script used: one-star-mode-inference-single-history.py
- Range of values used: mB == 23., mT = [15, 16, ..., 22], mM = [21.5], dx = [0, 1, 2, 3, 4, 5]
- Products: ./figures/one-star-mode-inference/single/
	- one-star-modal-inference-mB**-mT**-mM**-dx**-single-history.png: 

Mode inference with various initial problem
- Notes: Perform mode inference for a single star with one model star.
- Script used: one-star-mode-inference-many-trajectory.py
- Range of values used: mB == 23., mT = [15, 16, ..., 22], mM = [21.5], dx = [0, 1, 2, 3, 4, 5]
- Products: ./figures/one-star-mode-inference/many/
	- one-star-modal-inference-mB**-mT**-mM**-dx**-many-trajectory.png: 

/---- One star inference problem
General strategy:
- 48 x 48 image
- Assume that a mode has already been found. Place the star where the true position is supposed to be.
- Starts performing HMC. 
- For single inference:
	- Sample 10,000 points. Construct a scatter plot for xy and xm. Make histogram of x, y, m, and r. Plot average of the *distribution* on the histogram. Compute std.
		- Average here would be the estiamte.
		- std. is a statement of error.
- For many inference:
	- Repeat single inference for 10,000 times, each time calculating average and std. of the distribution.
	- Make histograms of averages.
- Repeat above for various true magnitudes.
(*Come back to below questions later*)
- What can you say about SN as function of magnitude? What is the property of average as the estimator? What is the variance of the average estimator?
- How does the inference change as a function of background? PSF size?

Full Bayesian inference of a single star problem. Single inferenece.
- Notes: The set up is the same as the mode inference problem except now we place the model star where it's supposed to be in x, y, and f. As described in the general strategy above. For now, we study mB = 23., mT=[15, 16, ..., 21.], mM = [21.5], dx = [0] cases.
- Script used: one-star-inference-single.py
- Products: ./figures/one-star-inference/single/
	- one-star-inference-single-mB%d-mT%d-mM%d-dx%d.png

/---- Exploring the typical set geometry of two stars
Study problems of non-identifiability here.
Create informative diagonostic plots.
Store gradients.

/---- Two star *mode* inference problem
General strategy:
- 48 x 48 image
- Various combintaion of magnitude pairs (lower traingle)
- With and without repulsive potentials


/---- Repulsive potentials
Form: f_j * f_k * e^[-g(f_j * f_k) * r] [1/|x_j-x_k| + 1/|y_j-y_k|]



/---- Failed ideas
Post-hoc ordering of samples: 
A series of deterministic binary reduction mapping as a post-hoc. Recovers convergence statistics

/---- For later considerations
Use HD5
Look at the simulations to see if you can gain any insight!
	https://chi-feng.github.io/mcmc-demo/app.html#HamiltonianMC,banana
Friction during burin-in
Blocking
Perhaps, the model could work by adding one star at a time and waiting until burn-in...
Repeat and see whether increasing number of stars can get accepted!
	- Study whether the number of stars can be determined this way... My guess is that once a star has fallen into its own well, it will stay there... Unless a fortuitous kicks to a parallel direction displaces one but not the other.
	- Empirical Bayes approach?
	- Stars can be randomly added... Only accept a star if... What criteria should be met?
Different parameterization to regularize gradient! Step in magnitude space and x/f, y/f
	Reparameterization doesn't reallly work!
Background can also be estimated :o 
Should be regularized... Hierarchical model? :o Spatial prior?
How do you approximate PSF?
C implementation
Admissibility -- All of stats?
When a new object is proposed, accept it only if it meets certain criteria

Requite speed to scale to LSST ( 3 * 10**12 / (3600 * 24 * 365 * 36 * 1000))